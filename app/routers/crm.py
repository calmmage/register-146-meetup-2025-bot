from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger
from typing import Dict, Any

from app.routers.admin import router
from app.app import TargetCity
from botspot import commands_menu
from botspot.components.qol.bot_commands_menu import Visibility
from botspot.user_interactions import ask_user_choice, ask_user_confirmation, ask_user_raw
from botspot.utils import send_safe
from botspot.utils.admin_filter import AdminFilter


def apply_message_templates(template: str, user_data: Dict[str, Any]) -> str:
    """
    Apply template substitutions to a message based on user data.
    
    Args:
        template: The message template containing placeholders
        user_data: Dictionary with user information
        
    Returns:
        Personalized message with replaced placeholders
    """
    from app.router import time_of_event, venue_of_event, address_of_event, padezhi
    
    # Extract user data
    user_name = user_data.get("full_name", "")
    user_city_value = user_data.get("target_city", "")
    user_year = user_data.get("graduation_year", "")
    user_class = user_data.get("class_letter", "")
    
    # Convert city string to enum for dictionary lookups
    city_enum = None
    for city_enum_value in TargetCity:
        if city_enum_value.value == user_city_value:
            city_enum = city_enum_value
            break
    
    # Get city-specific details
    user_city_padezh = padezhi.get(city_enum, user_city_value) if city_enum else "–≥–æ—Ä–æ–¥–µ"
    user_address = address_of_event.get(city_enum, "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è") if city_enum else "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è"
    user_venue = venue_of_event.get(city_enum, "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è") if city_enum else "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è"
    user_time = time_of_event.get(city_enum, "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è") if city_enum else "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è"
    
    # Apply substitutions
    result = template
    result = result.replace("{name}", user_name)
    result = result.replace("{city}", user_city_value)
    result = result.replace("{city_padezh}", user_city_padezh)
    result = result.replace("{address}", user_address)
    result = result.replace("{venue}", user_venue)
    result = result.replace("{time}", user_time)
    result = result.replace("{year}", str(user_year))
    result = result.replace("{class}", str(user_class))
    
    return result


@commands_menu.add_command(
    "notify", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("notify"), AdminFilter())
async def notify_users_handler(message: Message, state: FSMContext):
    """Notify users with a custom message using a step-by-step flow without state management"""

    # Step 1: Select audience (unpaid, paid, or everybody)
    audience = await ask_user_choice(
        message.chat.id,
        "–®–∞–≥ 1: –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?",
        choices={
            "unpaid": "–ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "paid": "–û–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "all": "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        timeout=None,
    )

    if audience == "cancel":
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # Step 2: Select city
    city = await ask_user_choice(
        message.chat.id,
        "–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        choices={
            "MOSCOW": "–ú–æ—Å–∫–≤–∞",
            "PERM": "–ü–µ—Ä–º—å",
            "SAINT_PETERSBURG": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "BELGRADE": "–ë–µ–ª–≥—Ä–∞–¥",
            "all": "–í—Å–µ –≥–æ—Ä–æ–¥–∞",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        timeout=None,
    )

    if city == "cancel":
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # Step 3: Enter text to be sent
    response = await ask_user_raw(
        message.chat.id,
        "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏:\n"
        "- {name} - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- {city} - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n"
        "- {city_padezh} - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ (–≤ –ú–æ—Å–∫–≤–µ, –≤ –ü–µ—Ä–º–∏)\n"
        "- {address} - –∞–¥—Ä–µ—Å –≤—Å—Ç—Ä–µ—á–∏\n"
        "- {venue} - –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n"
        "- {time} - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
        "- {year} - –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞\n"
        "- {class} - –±—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        state=state,
        timeout=None,
    )
    notification_text = response.html_text

    if not notification_text or notification_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # Get user list based on audience and city
    from app.router import app

    # Show processing message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # Get appropriate user list
    if audience == "unpaid":
        users = await app.get_unpaid_users(city if city != "all" else None)
        audience_name = "–Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    elif audience == "paid":
        users = await app.get_paid_users(city if city != "all" else None)
        audience_name = "–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:  # all
        users = await app.get_all_users(city if city != "all" else None)
        audience_name = "–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    # Check if we have users matching criteria
    if not users:
        await status_msg.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # Format city for display
    city_name = {
        "MOSCOW": "–ú–æ—Å–∫–≤–µ",
        "PERM": "–ü–µ—Ä–º–∏",
        "SAINT_PETERSBURG": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
        "BELGRADE": "–ë–µ–ª–≥—Ä–∞–¥–µ",
        "all": "–≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö",
    }.get(city, city)

    # Generate preview report
    preview = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} {audience_name} –≤ {city_name}:\n\n"

    # Show a preview of up to 10 users
    for i, user in enumerate(users[:10], 1):
        username = user.get("username", "–±–µ–∑ –∏–º–µ–Ω–∏")
        user_id = user.get("user_id", "??")
        full_name = user.get("full_name", "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        user_city = user.get("target_city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")

        preview += f"{i}. {full_name} (@{username or user_id})\n"
        preview += f"   üèôÔ∏è {user_city}\n"

    if len(users) > 10:
        preview += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    # Message preview with personalization example
    preview += "\n\n<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
    preview += notification_text
    
    # Define all available template markers
    template_markers = ["{name}", "{city}", "{city_padezh}", "{address}", "{venue}", "{time}", "{year}", "{class}"]
    
    # If we have users and there are templates in the message, show a personalized example
    if users and any(marker in notification_text for marker in template_markers):
        example_user = users[0]  # Take the first user for the example
        
        # Create a personalized example using our utility function
        personalized_example = apply_message_templates(notification_text, example_user)
        
        preview += "\n\n<b>–ü—Ä–∏–º–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
        preview += f"<i>{example_user.get('full_name', '')}</i>\n\n"
        preview += personalized_example

    # Update status message with preview
    await status_msg.edit_text(preview)

    # Step 4: Ask for final confirmation
    confirm = await ask_user_confirmation(
        message.chat.id,
        f"–®–∞–≥ 4: ‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        state=state,
    )

    if not confirm:
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # Send notifications
    sent_count = 0
    failed_count = 0

    status_msg = await send_safe(message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    for user in users:
        user_id = user.get("user_id")
        if not user_id:
            failed_count += 1
            continue

        try:
            # Process templates for this user using our utility function
            personalized_text = apply_message_templates(notification_text, user)
            
            await send_safe(user_id, personalized_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"Failed to send notification to user {user_id}: {e}")
            failed_count += 1

    # Update status message with results
    result_text = (
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"- –û—à–∏–±–æ–∫: {failed_count}"
    )

    await status_msg.edit_text(result_text)


@commands_menu.add_command(
    "test_user_selection", "–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("test_user_selection"), AdminFilter())
async def test_user_selection_handler(message: Message, state: FSMContext):
    """Test the user selection methods by reporting counts for each city and payment status"""
    from app.router import app

    # Show processing message
    status_msg = await send_safe(message.chat.id, "‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # Cities to test
    cities = ["MOSCOW", "PERM", "SAINT_PETERSBURG", "BELGRADE", "all"]

    # Initialize report
    report = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    report += "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ë–µ–ª–≥—Ä–∞–¥ –∏ —É—á–∏—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–µ.</i>\n\n"

    # Get counts for all cities combined
    all_users = await app.get_all_users()
    all_paid = await app.get_paid_users()
    all_unpaid = await app.get_unpaid_users()

    report += f"<b>–í—Å–µ –≥–æ—Ä–æ–¥–∞:</b>\n"
    report += f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
    report += f"- –û–ø–ª–∞—Ç–∏–≤—à–∏–µ: {len(all_paid)}\n"
    report += f"- –ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–µ: {len(all_unpaid)}\n\n"

    # Get counts for each city
    for city in cities:
        if city == "all":
            continue  # Already handled above

        city_display = {
            "MOSCOW": "–ú–æ—Å–∫–≤–∞",
            "PERM": "–ü–µ—Ä–º—å",
            "SAINT_PETERSBURG": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "BELGRADE": "–ë–µ–ª–≥—Ä–∞–¥",
        }.get(city, city)

        city_all = await app.get_all_users(city)
        city_paid = await app.get_paid_users(city)
        city_unpaid = await app.get_unpaid_users(city)

        report += f"<b>{city_display}:</b>\n"
        report += f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(city_all)}\n"
        report += f"- –û–ø–ª–∞—Ç–∏–≤—à–∏–µ: {len(city_paid)}\n"
        report += f"- –ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–µ: {len(city_unpaid)}\n\n"

    # Update status message with report
    await status_msg.edit_text(report, parse_mode="HTML")


@commands_menu.add_command(
    "notify_early_payment", "–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("notify_early_payment"), AdminFilter())
async def notify_early_payment_handler(message: Message, state: FSMContext):
    """Notify users who haven't paid yet about the early payment deadline"""

    # Ask user for action choice
    response = await ask_user_choice(
        message.chat.id,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        choices={
            "notify": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ",
            "dry_run": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        timeout=None,
    )

    if response == "cancel":
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    from app.router import app

    # Show processing message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö...")

    # Get list of users who haven't paid
    unpaid_users = await app.get_unpaid_users()

    # Check if we have unpaid users
    if not unpaid_users:
        await status_msg.edit_text("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏!")
        return

    # Generate report for both dry run and actual notification
    report = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unpaid_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–ø–ª–∞—Ç—ã:\n\n"

    for i, user in enumerate(unpaid_users, 1):
        username = user.get("username", "–±–µ–∑ –∏–º–µ–Ω–∏")
        user_id = user.get("user_id", "??")
        full_name = user.get("full_name", "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        city = user.get("target_city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        payment_status = user.get("payment_status", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")

        # Format payment status
        if payment_status == "pending":
            payment_status = "–û–ø–ª–∞—á—É –ø–æ–∑–∂–µ"
        elif payment_status == "declined":
            payment_status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        else:
            payment_status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

        report += f"{i}. {full_name} (@{username or user_id})\n"
        report += f"   üèôÔ∏è {city}, üí∞ {payment_status}\n\n"

    # Update status message with report
    await status_msg.edit_text(report)

    # For dry run, we're done
    if response == "dry_run":
        await send_safe(message.chat.id, "üîç –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å.")
        return

    # For actual notification, ask for confirmation
    confirm = await ask_user_confirmation(
        message.chat.id,
        f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(unpaid_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        state=state,
    )

    if not confirm:
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # Send notifications with templating
    notification_text = (
        "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–Ω–Ω–µ–π –æ–ø–ª–∞—Ç—ã "
        "–æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ 15 –º–∞—Ä—Ç–∞ 2025).\n\n"
        "–û–ø–ª–∞—Ç–∏–≤ —Å–µ–π—á–∞—Å, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–∫–∏–¥–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ {city_padezh}:\n"
        "- –ú–æ—Å–∫–≤–∞: 1000 —Ä—É–±.\n"
        "- –ü–µ—Ä–º—å: 500 —Ä—É–±.\n\n"
        "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {venue}\n"
        "–ê–¥—Ä–µ—Å: {address}\n"
        "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time}\n\n"
        "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /pay"
    )

    sent_count = 0
    failed_count = 0

    status_msg = await send_safe(message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    for user in unpaid_users:
        user_id = user.get("user_id")
        if not user_id:
            failed_count += 1
            continue

        try:
            # Process templates for this user using our utility function
            personalized_text = apply_message_templates(notification_text, user)
            
            await send_safe(user_id, personalized_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"Failed to send notification to user {user_id}: {e}")
            failed_count += 1

    # Update status message with results
    result_text = (
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"- –û—à–∏–±–æ–∫: {failed_count}"
    )

    await status_msg.edit_text(result_text)
