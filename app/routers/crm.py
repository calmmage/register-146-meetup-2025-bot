from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
)
from loguru import logger

from app.routers.admin import router
from botspot import commands_menu
from botspot.components.qol.bot_commands_menu import Visibility
from botspot.user_interactions import ask_user_choice, ask_user_confirmation
from botspot.utils import send_safe
from botspot.utils.admin_filter import AdminFilter


@commands_menu.add_command(
    "notify_early_payment", "–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("notify_early_payment"), AdminFilter())
async def notify_early_payment_handler(message: Message, state: FSMContext):
    """Notify users who haven't paid yet about the early payment deadline"""

    # Ask user for action choice
    response = await ask_user_choice(
        message.chat.id,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        choices={
            "notify": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ",
            "dry_run": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        timeout=None,
    )

    if response == "cancel":
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    from app.router import app

    # Show processing message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö...")

    # Get list of users who haven't paid
    unpaid_users = await app.get_unpaid_users()

    # Check if we have unpaid users
    if not unpaid_users:
        await status_msg.edit_text("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏!")
        return

    # Generate report for both dry run and actual notification
    report = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unpaid_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–ø–ª–∞—Ç—ã:\n\n"

    for i, user in enumerate(unpaid_users, 1):
        username = user.get("username", "–±–µ–∑ –∏–º–µ–Ω–∏")
        user_id = user.get("user_id", "??")
        full_name = user.get("full_name", "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        city = user.get("target_city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        payment_status = user.get("payment_status", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")

        # Format payment status
        if payment_status == "pending":
            payment_status = "–û–ø–ª–∞—á—É –ø–æ–∑–∂–µ"
        elif payment_status == "declined":
            payment_status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        else:
            payment_status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

        report += f"{i}. {full_name} (@{username or user_id})\n"
        report += f"   üèôÔ∏è {city}, üí∞ {payment_status}\n\n"

    # Update status message with report
    await status_msg.edit_text(report)

    # For dry run, we're done
    if response == "dry_run":
        await send_safe(message.chat.id, "üîç –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å.")
        return

    # For actual notification, ask for confirmation
    confirm = await ask_user_confirmation(
        message.chat.id,
        f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(unpaid_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        state=state,
    )

    if not confirm:
        await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # Send notifications
    notification_text = (
        "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–Ω–Ω–µ–π –æ–ø–ª–∞—Ç—ã "
        "–æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ 15 –º–∞—Ä—Ç–∞ 2025).\n\n"
        "–û–ø–ª–∞—Ç–∏–≤ —Å–µ–π—á–∞—Å, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–∫–∏–¥–∫—É:\n"
        "- –ú–æ—Å–∫–≤–∞: 1000 —Ä—É–±.\n"
        "- –ü–µ—Ä–º—å: 500 —Ä—É–±.\n\n"
        "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /pay"
    )

    sent_count = 0
    failed_count = 0

    status_msg = await send_safe(message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    for user in unpaid_users:
        user_id = user.get("user_id")
        if not user_id:
            failed_count += 1
            continue

        try:
            await send_safe(user_id, notification_text)
            sent_count += 1
        except Exception as e:
            logger.error(f"Failed to send notification to user {user_id}: {e}")
            failed_count += 1

    # Update status message with results
    result_text = (
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"- –û—à–∏–±–æ–∫: {failed_count}"
    )

    await status_msg.edit_text(result_text)
