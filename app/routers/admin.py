import base64
import io
import json
from collections import defaultdict
from typing import Optional

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    BufferedInputFile,
)
from litellm import acompletion
from loguru import logger
from pydantic import BaseModel

from botspot import commands_menu
from botspot.components.qol.bot_commands_menu import Visibility
from botspot.user_interactions import ask_user_choice, ask_user_raw
from botspot.utils import send_safe
from botspot.utils.admin_filter import AdminFilter


# Define Pydantic model for payment information
class PaymentInfo(BaseModel):
    amount: Optional[int]
    is_valid: bool  # Whether there's a clear payment amount in the document


router = Router()


# Helper function for calculating median
def get_median(ratios):
    if not ratios:
        return 0
    ratios.sort()
    return ratios[len(ratios) // 2]


async def admin_handler(message: Message, state: FSMContext):
    # Show admin options
    response = await ask_user_choice(
        message.chat.id,
        "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        # todo: rework this?
        choices={
            "notify_users": "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            # stats
            "view_stats": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–æ–¥—Ä–æ–±–Ω–æ)",
            "view_simple_stats": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫—Ä–∞—Ç–∫–æ)",
            # not finished
            # "mark_payment": "–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é",
            # testing
            "register": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ (–æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)",
            # other
            "other": "–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
        },
        state=state,
        timeout=None,
    )

    if response == "other":

        response = await ask_user_choice(
            message.chat.id,
            "–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
            choices={
                "view_year_stats": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞",
                "five_year_stats": "–ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞",
                "payment_stats": "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ–ø–ª–∞—Ç",
                # old
                "export": "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                # too late
                # "notify_early_payment": "–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–∞–Ω–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ",
            },
            state=state,
            timeout=None,
        )

    if response == "export":
        await export_handler(message, state)
    elif response == "view_stats":
        await show_stats(message)
    elif response == "view_simple_stats":
        await show_simple_stats(message)
    elif response == "view_year_stats":
        await show_year_stats(message)
    elif response == "five_year_stats":
        await show_five_year_stats(message)
    elif response == "payment_stats":
        await show_payment_stats(message)
    # elif response == "mark_payment":
    # await mark_payment_handler(message, state)
    elif response == "notify_users":
        from app.routers.crm import notify_users_handler

        await notify_users_handler(message, state)
    # For "register", continue with normal flow
    return response


@commands_menu.add_command(
    "export", "–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("export"), AdminFilter())
async def export_handler(message: Message, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Google Sheets –∏–ª–∏ CSV"""
    notif = await send_safe(message.chat.id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...")

    # Ask user for export type
    export_type_response = await ask_user_choice(
        message.chat.id,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        choices={"registered": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", "deleted": "–£–¥–∞–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"},
        state=state,
        timeout=None,
    )

    # Ask user for export format
    export_format_response = await ask_user_choice(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        choices={"sheets": "Google –¢–∞–±–ª–∏—Ü—ã", "csv": "CSV –§–∞–π–ª"},
        state=state,
        timeout=None,
    )

    from app.router import app

    # Handle registered users export
    if export_type_response == "registered":
        if export_format_response == "sheets":
            await notif.edit_text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—ã...")
            result = await app.export_registered_users_to_google_sheets()
            await send_safe(message.chat.id, result)
        else:
            # Export to CSV
            await notif.edit_text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª...")
            csv_content, result_message = await app.export_to_csv()

            if csv_content:
                # Send the CSV content as a file using send_safe
                await send_safe(message.chat.id, csv_content, filename="—É—á–∞—Å—Ç–Ω–∏–∫–∏_–≤—Å—Ç—Ä–µ—á–∏.csv")
            else:
                await send_safe(message.chat.id, result_message)

    # Handle deleted users export
    else:  # export_type_response == "deleted"
        if export_format_response == "sheets":
            await notif.edit_text("–≠–∫—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—ã...")
            await send_safe(
                message.chat.id,
                "–≠–∫—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
            )
        else:
            # Export to CSV
            await notif.edit_text("–≠–∫—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV —Ñ–∞–π–ª...")
            csv_content, result_message = await app.export_deleted_users_to_csv()

            if csv_content:
                # Send the CSV content as a file using send_safe
                await send_safe(message.chat.id, csv_content, filename="—É–¥–∞–ª–µ–Ω–Ω—ã–µ_—É—á–∞—Å—Ç–Ω–∏–∫–∏.csv")
            else:
                await send_safe(message.chat.id, result_message)

    await notif.delete()


def _format_graduate_type(grad_type: str, plural=False):
    from app.app import GRADUATE_TYPE_MAP, GRADUATE_TYPE_MAP_PLURAL

    if plural:
        return GRADUATE_TYPE_MAP_PLURAL[grad_type.upper()]
    return GRADUATE_TYPE_MAP[grad_type.upper()]


@commands_menu.add_command("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", visibility=Visibility.ADMIN_ONLY)
@router.message(Command("stats"), AdminFilter())
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
    from app.router import app
    from app.app import PAYMENT_STATUS_MAP

    # Initialize stats text
    stats_text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π</b>\n\n"

    # 1. Count registrations by city
    city_cursor = app.collection.aggregate(
        [{"$group": {"_id": "$target_city", "count": {"$sum": 1}}}]
    )
    city_stats = await city_cursor.to_list(length=None)

    stats_text += "<b>üåÜ –ü–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
    total = 0
    for stat in city_stats:
        city = stat["_id"]
        count = stat["count"]
        total += count
        stats_text += f"‚Ä¢ {city}: <b>{count}</b> —á–µ–ª–æ–≤–µ–∫\n"
    stats_text += f"\n–í—Å–µ–≥–æ: <b>{total}</b> —á–µ–ª–æ–≤–µ–∫\n\n"

    # 2. Distribution by graduate type
    grad_cursor = app.collection.aggregate(
        [
            {
                "$addFields": {
                    "normalized_type": {
                        "$toUpper": {
                            "$cond": [
                                {
                                    "$or": [
                                        {"$eq": ["$graduate_type", None]},
                                        {"$eq": [{"$toUpper": "$graduate_type"}, "GRADUATE"]},
                                    ]
                                },
                                "GRADUATE",
                                "$graduate_type",
                            ]
                        }
                    }
                }
            },
            {"$group": {"_id": "$normalized_type", "count": {"$sum": 1}}},
        ]
    )
    grad_stats = await grad_cursor.to_list(length=None)

    stats_text += "<b>üë• –ü–æ —Å—Ç–∞—Ç—É—Å—É:</b>\n"
    for stat in grad_stats:
        grad_type = (
            stat["_id"] or "GRADUATE"
        ).upper()  # Default to GRADUATE if None and ensure uppercase
        count = stat["count"]
        text = _format_graduate_type(grad_type, plural=count != 1)
        stats_text += f"‚Ä¢ {text}: <b>{count}</b>\n"
    stats_text += "\n"

    # 3. Payment statistics by city
    payment_cursor = app.collection.aggregate(
        [
            {"$match": {"target_city": {"$ne": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}}},  # Exclude SPb as it's free
            {"$match": {"target_city": {"$ne": "–ë–µ–ª–≥—Ä–∞–¥"}}},  # Exclude Belgrade as it's free
            {"$match": {"graduate_type": {"$ne": "TEACHER"}}},  # Exclude teachers as they don't pay
            {
                "$group": {
                    "_id": "$target_city",
                    "payments": {
                        "$push": {
                            "payment": {"$ifNull": ["$payment_amount", 0]},
                            "formula": {"$ifNull": ["$formula_payment_amount", 0]},
                            "regular": {"$ifNull": ["$regular_payment_amount", 0]},
                            "discounted": {"$ifNull": ["$discounted_payment_amount", 0]},
                        }
                    },
                    "total_paid": {"$sum": {"$ifNull": ["$payment_amount", 0]}},
                    "confirmed_count": {
                        "$sum": {"$cond": [{"$eq": ["$payment_status", "confirmed"]}, 1, 0]}
                    },
                    "pending_count": {
                        "$sum": {
                            "$cond": [
                                {
                                    "$or": [
                                        {"$eq": ["$payment_status", "pending"]},
                                    ]
                                },
                                1,
                                0,
                            ]
                        }
                    },
                    "declined_count": {
                        "$sum": {"$cond": [{"$eq": ["$payment_status", "declined"]}, 1, 0]}
                    },
                    "unpaid_count": {
                        "$sum": {
                            "$cond": [
                                {
                                    "$or": [
                                        {"$eq": ["$payment_status", None]},
                                        {"$eq": ["$payment_status", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"]},
                                        {"$not": "$payment_status"},  # No payment_status field
                                    ]
                                },
                                1,
                                0,
                            ]
                        }
                    },
                }
            },
        ]
    )
    payment_stats = await payment_cursor.to_list(length=None)

    stats_text += "<b>üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç:</b>\n"
    total_paid = 0
    total_formula = 0
    total_regular = 0
    total_discounted = 0

    for stat in payment_stats:
        city = stat["_id"]
        paid = stat["total_paid"]
        payments = stat["payments"]

        # Calculate median percentages for paid registrations
        paid_ratios_formula = []
        paid_ratios_regular = []
        paid_ratios_discounted = []

        for p in payments:
            if p["payment"] > 0:  # Only include those who paid
                if p["formula"] > 0:
                    paid_ratios_formula.append((p["payment"] / p["formula"]) * 100)
                if p["regular"] > 0:
                    paid_ratios_regular.append((p["payment"] / p["regular"]) * 100)
                if p["discounted"] > 0:
                    paid_ratios_discounted.append((p["payment"] / p["discounted"]) * 100)

        # Calculate medians
        median_formula = get_median(paid_ratios_formula)
        median_regular = get_median(paid_ratios_regular)
        median_discounted = get_median(paid_ratios_discounted)

        # Calculate totals
        formula_total = sum(p["formula"] for p in payments)
        regular_total = sum(p["regular"] for p in payments)
        discounted_total = sum(p["discounted"] for p in payments)

        total_paid += paid
        total_formula += formula_total
        total_regular += regular_total
        total_discounted += discounted_total

        stats_text += f"\n<b>{city}:</b>\n"
        stats_text += f"üíµ –°–æ–±—Ä–∞–Ω–æ: <b>{paid:,}</b> —Ä—É–±.\n"
        stats_text += f"üìä –ú–µ–¥–∏–∞–Ω–∞ % –æ—Ç —Ñ–æ—Ä–º—É–ª—ã: <i>{median_formula:.1f}%</i>\n"
        stats_text += f"üìä –ú–µ–¥–∏–∞–Ω–∞ % –æ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π: <i>{median_regular:.1f}%</i>\n"
        stats_text += f"üìä –ú–µ–¥–∏–∞–Ω–∞ % –æ—Ç –º–∏–Ω. —Å–æ —Å–∫–∏–¥–∫–æ–π: <i>{median_discounted:.1f}%</i>\n\n"

        # Payment status distribution
        stats_text += "<u>–°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π:</u>\n"
        stats_text += f"‚úÖ {PAYMENT_STATUS_MAP['confirmed']}: <b>{stat['confirmed_count']}</b>\n"
        stats_text += f"‚è≥ {PAYMENT_STATUS_MAP['pending']}: <b>{stat['pending_count']}</b>\n"
        stats_text += f"‚ö™Ô∏è {PAYMENT_STATUS_MAP[None]}: <b>{stat['declined_count'] + stat['unpaid_count']}</b>\n"

    # Add totals
    if total_paid > 0:
        stats_text += f"\n<b>üíµ –ò—Ç–æ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_paid:,} —Ä—É–±.</b>\n"

        # Calculate overall medians
        all_ratios_formula = []
        all_ratios_regular = []
        all_ratios_discounted = []

        for stat in payment_stats:
            for p in stat["payments"]:
                if p["payment"] > 0:
                    if p["formula"] > 0:
                        all_ratios_formula.append((p["payment"] / p["formula"]) * 100)
                    if p["regular"] > 0:
                        all_ratios_regular.append((p["payment"] / p["regular"]) * 100)
                    if p["discounted"] > 0:
                        all_ratios_discounted.append((p["payment"] / p["discounted"]) * 100)

        total_median_formula = get_median(all_ratios_formula)
        total_median_regular = get_median(all_ratios_regular)
        total_median_discounted = get_median(all_ratios_discounted)

        stats_text += f"üìä –û–±—â–∞—è –º–µ–¥–∏–∞–Ω–∞ % –æ—Ç —Ñ–æ—Ä–º—É–ª—ã: <i>{total_median_formula:.1f}%</i>\n"
        stats_text += f"üìä –û–±—â–∞—è –º–µ–¥–∏–∞–Ω–∞ % –æ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π: <i>{total_median_regular:.1f}%</i>\n"
        stats_text += (
            f"üìä –û–±—â–∞—è –º–µ–¥–∏–∞–Ω–∞ % –æ—Ç –º–∏–Ω. —Å–æ —Å–∫–∏–¥–∫–æ–π: <i>{total_median_discounted:.1f}%</i>\n"
        )

    await send_safe(message.chat.id, stats_text)


@commands_menu.add_command(
    "simple_stats", "–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("simple_stats"), AdminFilter())
async def show_simple_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
    from app.router import app
    from app.app import PAYMENT_STATUS_MAP

    stats_text = "<b>üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π</b>\n\n"

    # 1. Count registrations by city
    city_cursor = app.collection.aggregate(
        [{"$group": {"_id": "$target_city", "count": {"$sum": 1}}}]
    )
    city_stats = await city_cursor.to_list(length=None)

    stats_text += "<b>üåÜ –ü–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
    total = 0
    for stat in city_stats:
        city = stat["_id"]
        count = stat["count"]
        total += count
        stats_text += f"‚Ä¢ {city}: <b>{count}</b> —á–µ–ª–æ–≤–µ–∫\n"
    stats_text += f"\n–í—Å–µ–≥–æ: <b>{total}</b> —á–µ–ª–æ–≤–µ–∫\n\n"

    # 2. Distribution by graduate type
    grad_cursor = app.collection.aggregate(
        [
            {
                "$addFields": {
                    "normalized_type": {
                        "$toUpper": {
                            "$cond": [
                                {
                                    "$or": [
                                        {"$eq": ["$graduate_type", None]},
                                        {"$eq": [{"$toUpper": "$graduate_type"}, "GRADUATE"]},
                                    ]
                                },
                                "GRADUATE",
                                "$graduate_type",
                            ]
                        }
                    }
                }
            },
            {"$group": {"_id": "$normalized_type", "count": {"$sum": 1}}},
        ]
    )
    grad_stats = await grad_cursor.to_list(length=None)

    stats_text += "<b>üë• –ü–æ —Å—Ç–∞—Ç—É—Å—É:</b>\n"
    for stat in grad_stats:
        grad_type = (
            stat["_id"] or "GRADUATE"
        ).upper()  # Default to GRADUATE if None and ensure uppercase
        count = stat["count"]
        text = _format_graduate_type(grad_type, plural=count != 1)
        stats_text += f"‚Ä¢ {text}: <b>{count}</b>\n"
    stats_text += "\n"

    # 3. Basic payment status distribution (without amounts)
    payment_cursor = app.collection.aggregate(
        [
            {"$match": {"target_city": {"$ne": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}}},  # Exclude SPb as it's free
            {"$match": {"target_city": {"$ne": "–ë–µ–ª–≥—Ä–∞–¥"}}},  # Exclude Belgrade as it's free
            {"$match": {"graduate_type": {"$ne": "TEACHER"}}},  # Exclude teachers as they don't pay
            {
                "$group": {
                    "_id": "$target_city",
                    "confirmed_count": {
                        "$sum": {"$cond": [{"$eq": ["$payment_status", "confirmed"]}, 1, 0]}
                    },
                    "pending_count": {
                        "$sum": {
                            "$cond": [
                                {
                                    "$or": [
                                        {"$eq": ["$payment_status", "pending"]},
                                    ]
                                },
                                1,
                                0,
                            ]
                        }
                    },
                    "declined_count": {
                        "$sum": {"$cond": [{"$eq": ["$payment_status", "declined"]}, 1, 0]}
                    },
                    "unpaid_count": {
                        "$sum": {
                            "$cond": [
                                {
                                    "$or": [
                                        {"$eq": ["$payment_status", None]},
                                        {"$eq": ["$payment_status", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"]},
                                        {"$not": "$payment_status"},  # No payment_status field
                                    ]
                                },
                                1,
                                0,
                            ]
                        }
                    },
                }
            },
        ]
    )
    payment_stats = await payment_cursor.to_list(length=None)

    stats_text += "<b>üí∞ –°—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç:</b>\n"
    total_confirmed = 0
    total_pending = 0
    total_declined = 0
    total_unpaid = 0

    for stat in payment_stats:
        city = stat["_id"]
        confirmed = stat["confirmed_count"]
        pending = stat["pending_count"]
        declined = stat["declined_count"]
        unpaid = stat["unpaid_count"]

        total_confirmed += confirmed
        total_pending += pending
        total_declined += declined
        total_unpaid += unpaid

        stats_text += f"\n<b>{city}:</b>\n"
        stats_text += f"‚úÖ {PAYMENT_STATUS_MAP['confirmed']}: <b>{confirmed}</b>\n"
        stats_text += f"‚è≥ {PAYMENT_STATUS_MAP['pending']}: <b>{pending}</b>\n"
        stats_text += f"‚ö™Ô∏è {PAYMENT_STATUS_MAP[None]}: <b>{declined + unpaid}</b>\n"

    # Add totals
    total_with_payment = total_confirmed + total_pending + total_declined + total_unpaid
    if total_with_payment > 0:
        stats_text += f"\n<b>–í—Å–µ–≥–æ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        stats_text += f"‚úÖ {PAYMENT_STATUS_MAP['confirmed']}: <b>{total_confirmed}</b>\n"
        stats_text += f"‚è≥ {PAYMENT_STATUS_MAP['pending']}: <b>{total_pending}</b>\n"
        stats_text += f"‚ö™Ô∏è {PAYMENT_STATUS_MAP[None]}: <b>{total_declined + total_unpaid}</b>\n"

    await send_safe(message.chat.id, stats_text)


@commands_menu.add_command(
    "normalize_db", "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∏–ø—ã –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –≤ –ë–î", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("normalize_db"), AdminFilter())
async def normalize_db(message: Message):
    """Normalize graduate types in the database"""
    from app.router import app

    # Send initial message
    status_msg = await send_safe(message.chat.id, "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # Run normalization
    modified = await app.normalize_graduate_types()

    # Update message with results
    await status_msg.edit_text(f"‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {modified}")


# todo: auto-determine file type from name.
# async def extract_payment_from_image(
#         file_bytes: bytes
# file_name: str
# ) -> PaymentInfo:
# if file_name.endswith(".pdf"):
#     file_type = "application/pdf"
## elif file_name.endswith(".jpg") or file_name.endswith(".jpeg") or file_name.endswith(".png"):
# else:
#     file_type = "image/{file_name.split('.')[-1]}"
async def extract_payment_from_image(
    file_bytes: bytes, file_type: str = "image/jpeg"
) -> PaymentInfo:
    """Extract payment amount from an image or PDF using GPT-4 Vision via litellm"""
    try:
        # Define the system prompt for payment extraction
        system_prompt = """You are a payment receipt analyzer.
        Your task is to extract ONLY the payment amount in rubles from the receipt image or PDF.

        If you cannot determine the amount or if it's ambiguous, set amount to null and is_valid to false."""

        # For images, encode to base64
        encoded_file = base64.b64encode(file_bytes).decode("utf-8")
        if file_type not in ["image/jpeg", "image/png", "application/pdf"]:
            raise ValueError(f"Unsupported file type: {file_type}")

        messages = [
            {"role": "system", "content": system_prompt},
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "Please extract the payment amount from this receipt:",
                    },
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:{file_type};base64,{encoded_file}"},
                    },
                ],
            },
        ]

        # Make the API call with the Pydantic model
        response = await acompletion(
            model="claude-3-5-sonnet-20240620",
            messages=messages,
            max_tokens=100,
            response_format=PaymentInfo,
        )

        return PaymentInfo(**json.loads(response.choices[0].message.content))
    except Exception as e:
        logger.error(f"Error extracting payment amount: {e}")
        return PaymentInfo(amount=None, is_valid=False)


@commands_menu.add_command(
    "parse_payment", "–ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–º–æ—â—å—é GPT-4", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("parse_payment"), AdminFilter())
async def parse_payment_handler(message: Message, state: FSMContext):
    """Hidden admin command to test payment parsing from images/PDFs"""
    # Ask user to send a payment proof
    response = await ask_user_raw(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ PDF —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞",
        state,
        timeout=300,  # 5 minutes timeout
    )

    if not response:
        await send_safe(message.chat.id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
        return

    # Check if the message has a photo or document
    has_photo = response.photo is not None and len(response.photo) > 0
    has_pdf = response.document is not None and response.document.mime_type == "application/pdf"

    if not (has_photo or has_pdf):
        await send_safe(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF-—Ñ–∞–π–ª")
        return

    # Send status message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞—Ç–µ–∂...")

    try:
        # Download the file
        from botspot.core.dependency_manager import get_dependency_manager

        deps = get_dependency_manager()
        bot = deps.bot

        file_id = None
        if has_photo and response.photo:
            # Get the largest photo
            file_id = response.photo[-1].file_id
            file_type = "image/jpeg"
        elif has_pdf and response.document:
            file_id = response.document.file_id
            file_type = "application/pdf"
        else:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
            return

        if not file_id:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
            return

        # Download the file
        file = await bot.get_file(file_id)
        if not file or not file.file_path:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            return

        file_bytes = await bot.download_file(file.file_path)
        if not file_bytes:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            return

        # Extract payment information directly from the file
        result = await extract_payment_from_image(file_bytes.read(), file_type)

        # Format the response
        if result.is_valid:
            response_text = f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É: <b>{result.amount}</b> —Ä—É–±."
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞"

        # Update the status message with the results
        await status_msg.edit_text(response_text, parse_mode="HTML")

    except Exception as e:
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@commands_menu.add_command(
    "year_stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("year_stats"), AdminFilter())
async def show_year_stats(message: Message):
    """Show registration statistics by graduation year with matplotlib diagrams"""
    from app.router import app

    # Send status message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞...")

    # Get all registrations
    cursor = app.collection.find(
        {
            "graduation_year": {
                "$exists": True,
                "$ne": 0,
            },  # Filter out teachers and others without graduation year
        }
    )
    registrations = await cursor.to_list(length=None)

    if not registrations:
        await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ–¥–æ–º –≤—ã–ø—É—Å–∫–∞.")
        return

    # Group registrations by city and year
    cities = ["–ú–æ—Å–∫–≤–∞", "–ü–µ—Ä–º—å", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ë–µ–ª–≥—Ä–∞–¥"]
    city_year_counts = {}

    for city in cities:
        city_year_counts[city] = defaultdict(int)

    all_years = set()

    for reg in registrations:
        city = reg.get("target_city")
        year = reg.get("graduation_year")

        # Skip registrations without valid graduation year (teachers, etc.)
        if not year or year == 0 or city not in cities:
            continue

        # Count by city and year
        city_year_counts[city][year] += 1
        all_years.add(year)

    # Group years into 5-year periods for text statistics
    min_year = min(all_years)
    max_year = max(all_years)

    # Round min_year down to the nearest multiple of 5
    period_start = min_year - (min_year % 5)

    # Create periods (e.g. 1995-1999, 2000-2004, etc.)
    periods = []
    period_labels = []
    current = period_start

    while current <= max_year:
        period_end = current + 4
        periods.append((current, period_end))
        period_labels.append(f"{current}-{period_end}")
        current += 5

    # Count registrations by period for each city
    period_counts = {city: [0] * len(periods) for city in cities}

    for city in cities:
        for year, count in city_year_counts[city].items():
            # Find which period this year belongs to
            for i, (start, end) in enumerate(periods):
                if start <= year <= end:
                    period_counts[city][i] += count
                    break

    # Prepare the summary statistics text
    stats_text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞</b>\n\n"

    # Add total registrations per period
    stats_text += "<b>üéì –ü–æ –ø–µ—Ä–∏–æ–¥–∞–º (–≤—Å–µ –≥–æ—Ä–æ–¥–∞):</b>\n"

    for i, period in enumerate(period_labels):
        period_total = sum(period_counts[city][i] for city in cities)
        stats_text += f"‚Ä¢ {period}: <b>{period_total}</b> —á–µ–ª–æ–≤–µ–∫\n"

    # Add city breakdown
    for city in cities:
        stats_text += f"\n<b>üèôÔ∏è {city}:</b>\n"
        for i, period in enumerate(period_labels):
            count = period_counts[city][i]
            stats_text += f"‚Ä¢ {period}: <b>{count}</b> —á–µ–ª–æ–≤–µ–∫\n"

    # Convert data to pandas DataFrame for seaborn
    data = []
    sorted_years = sorted(all_years)

    for city in cities:
        for year in sorted_years:
            count = city_year_counts[city].get(year, 0)
            if count > 0:  # Only include non-zero values
                data.append({"–ì–æ—Ä–æ–¥": city, "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞": year, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": count})

    df = pd.DataFrame(data)

    # Define the color palette
    city_palette = {
        "–ú–æ—Å–∫–≤–∞": "#FF6666",  # stronger red
        "–ü–µ—Ä–º—å": "#5599FF",  # stronger blue
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "#66CC66",  # stronger green
        "–ë–µ–ª–≥—Ä–∞–¥": "#FF00FF",  # stronger purple
    }

    # Create figure with better size for readability
    plt.figure(figsize=(15, 8), dpi=100)

    # Use seaborn with custom styling
    sns.set_style("whitegrid")

    # Create the bar plot
    ax = sns.barplot(
        data=df, x="–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", hue="–ì–æ—Ä–æ–¥", palette=city_palette, errorbar=None
    )

    # Add annotations for each bar
    for container in ax.containers:
        ax.bar_label(container, fontsize=9, fontweight="bold", padding=3)

    # Enhance the plot with better styling
    plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞", fontsize=18, pad=20)
    plt.xlabel("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", fontsize=14, labelpad=10)
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫", fontsize=14, labelpad=10)
    plt.xticks(rotation=45)
    plt.legend(title="–ì–æ—Ä–æ–¥", fontsize=12, title_fontsize=14)

    # Adjust layout
    plt.tight_layout()

    # Save the plot to a bytes buffer
    buf_all_cities = io.BytesIO()
    plt.savefig(buf_all_cities, format="png")
    buf_all_cities.seek(0)
    plt.close()

    # Send the stats text and diagram
    await status_msg.delete()

    # Send the text first
    await send_safe(message.chat.id, stats_text, parse_mode="HTML")

    # Send the diagram
    await message.answer_photo(
        BufferedInputFile(buf_all_cities.getvalue(), filename="registration_stats.png")
    )


@commands_menu.add_command(
    "five_year_stats", "–ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("five_year_stats"), AdminFilter())
async def show_five_year_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞ –∏ –≥–æ—Ä–æ–¥–∞–º"""
    from app.router import app

    # Send status message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞...")

    # Get all registrations
    cursor = app.collection.find(
        {
            "graduation_year": {
                "$exists": True,
                "$ne": 0,
            },  # Filter out entries without graduation year
        }
    )
    registrations = await cursor.to_list(length=None)

    if not registrations:
        await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ–¥–æ–º –≤—ã–ø—É—Å–∫–∞.")
        return

    # Convert MongoDB records to pandas DataFrame
    df = pd.DataFrame(registrations)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–æ–≤ –≤—ã–ø—É—Å–∫–∞
    df["graduation_year"] = pd.to_numeric(df["graduation_year"], errors="coerce")
    df = df.dropna(subset=["graduation_year"])
    df["–ü—è—Ç–∏–ª–µ—Ç–∫–∞"] = df["graduation_year"].apply(lambda y: f"{int(y)//5*5}‚Äì{int(y)//5*5 + 4}")

    # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤
    def simplify_city(city):
        if pd.isna(city):
            return "–î—Ä—É–≥–∏–µ"
        city = str(city).strip().lower()
        if "–ø–µ—Ä–º" in city:
            return "–ü–µ—Ä–º—å"
        elif "–º–æ—Å–∫" in city:
            return "–ú–æ—Å–∫–≤–∞"
        elif "—Å–ø–±" in city or "–ø–∏—Ç–µ—Ä" in city or "—Å–∞–Ω–∫—Ç" in city:
            return "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        elif "–±–µ–ª–≥—Ä–∞–¥" in city:
            return "–ë–µ–ª–≥—Ä–∞–¥"
        else:
            return "–î—Ä—É–≥–∏–µ"

    df["–ì–æ—Ä–æ–¥ (—É–∫—Ä—É–ø–Ω—ë–Ω–Ω–æ)"] = df["target_city"].apply(simplify_city)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º
    pivot = (
        df.groupby(["–ü—è—Ç–∏–ª–µ—Ç–∫–∞", "–ì–æ—Ä–æ–¥ (—É–∫—Ä—É–ø–Ω—ë–Ω–Ω–æ)"])["full_name"]
        .count()
        .unstack()
        .fillna(0)
        .sort_index()
    )

    # –£–ø–æ—Ä—è–¥–æ—á–∏–º –∫–æ–ª–æ–Ω–∫–∏
    city_order = ["–ü–µ—Ä–º—å", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ë–µ–ª–≥—Ä–∞–¥", "–î—Ä—É–≥–∏–µ"]
    available_cities = [c for c in city_order if c in pivot.columns]
    if available_cities:
        pivot = pivot[available_cities]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(12, 7), dpi=100)
    ax = pivot.plot(kind="bar", stacked=True, figsize=(12, 7), colormap="Set2")

    plt.title("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞ (–≥–æ—Ä–æ–¥–∞: –ü–µ—Ä–º—å, –ú–æ—Å–∫–≤–∞, –°–ü–±, –ë–µ–ª–≥—Ä–∞–¥)")
    plt.xlabel("–ü—è—Ç–∏–ª–µ—Ç–∫–∞")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    plt.xticks(rotation=45)
    plt.legend(title="–ì–æ—Ä–æ–¥", bbox_to_anchor=(1.05, 1), loc="upper left")
    plt.tight_layout()
    plt.grid(axis="y")

    # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    for bar_idx, (idx, row) in enumerate(pivot.iterrows()):
        cumulative = 0
        for city in pivot.columns:
            value = row[city]
            if value > 0:
                ax.text(
                    x=bar_idx,
                    y=cumulative + value / 2,
                    s=int(value),
                    ha="center",
                    va="center",
                    fontsize=9,
                )
                cumulative += value

    # Save the plot to a bytes buffer
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    # Delete status message
    await status_msg.delete()

    # Send the diagram
    await message.answer_photo(
        BufferedInputFile(buf.getvalue(), filename="five_year_stats.png"),
        caption="üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞ –∏ –≥–æ—Ä–æ–¥–∞–º —É—á–∞—Å—Ç–∏—è",
    )


# @commands_menu.add_command(
#     "mark_payment", "–ü–æ–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", visibility=Visibility.ADMIN_ONLY
# )
# @router.message(Command("mark_payment"), AdminFilter())
# async def mark_payment_handler(message: Message, state: FSMContext):
#     """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã"""
#     from app.router import app
#
#     # Ask for search term
#     search_message = await ask_user(
#         message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –§–ò–û –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", state
#     )
#
#     from app.router import app
#
#     search_term = message.text.strip()
#     if len(search_term) < 3:
#         await send_safe(
#             message.chat.id,
#             "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤:",
#         )
#         return
#
#     # Get state data
#     state_data = await state.get_data()
#     search_message_id = state_data.get("search_message_id")
#
#     # Show searching message
#     status_msg = await send_safe(
#         message.chat.id,
#         f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'...",
#     )
#
#     # Build search query (search in username or fullname)
#     if search_term.startswith("@"):
#         # Remove @ for username search
#         username_query = search_term[1:].lower()
#         query = {"username": {"$regex": username_query, "$options": "i"}}
#     else:
#         # Search in full_name
#         query = {"full_name": {"$regex": search_term, "$options": "i"}}
#
#     # Execute search
#     cursor = app.collection.find(query)
#     users = await cursor.to_list(length=None)
#
#     # Group users by user_id to avoid duplicates
#     users_by_id = {}
#     for user in users:
#         user_id = user.get("user_id")
#         if user_id not in users_by_id:
#             users_by_id[user_id] = user
#
#     # Check if we found any users
#     if not users_by_id:
#         await status_msg.edit_text(
#             f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
#         )
#         return
#
#     # Prepare choices for selection
#     choices = {}
#     for user_id, user in users_by_id.items():
#         username = user.get("username", "")
#         full_name = user.get("full_name", "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
#         city = user.get("target_city", "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
#         payment_status = user.get("payment_status", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")
#
#         # Format payment status
#         if payment_status == "confirmed":
#             payment_status = "–û–ø–ª–∞—á–µ–Ω–æ"
#         elif payment_status == "pending":
#             payment_status = "–û–ø–ª–∞—á—É –ø–æ–∑–∂–µ"
#         elif payment_status == "declined":
#             payment_status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
#         else:
#             payment_status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
#
#         # Format display text
#         display = f"{full_name}"
#         if username:
#             display += f" (@{username})"
#         display += f" - {city}, {payment_status}"
#
#         # Add to choices
#         choices[str(user_id)] = display
#
#     # Add cancel option
#     choices["cancel"] = "‚ùå –û—Ç–º–µ–Ω–∞"
#
#     # Update search status message
#     await status_msg.edit_text(
#         f"üîç –ù–∞–π–¥–µ–Ω–æ {len(users_by_id)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
#     )
#
#     # Ask for user selection
#     response = await ask_user_choice(
#         message.chat.id,
#         "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
#         choices=choices,
#         state=state,
#         timeout=None,
#     )
#
#     # Handle response
#     if response == "cancel":
#         await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#         await state.clear()
#         return
#
#     # Get selected user
#     user_id = int(response)
#     selected_user = users_by_id.get(user_id)
#
#     if not selected_user:
#         await send_safe(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.")
#         await state.clear()
#         return
#
#     # Get all cities for this user to choose from
#     all_registrations = await app.get_user_registrations(user_id)
#
#     # Filter only cities that require payment (exclude SPb, Belgrade, and teacher registrations)
#     payment_registrations = [
#         reg
#         for reg in all_registrations
#         if reg["target_city"] != "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
#         and reg["target_city"] != "–ë–µ–ª–≥—Ä–∞–¥"
#         and reg.get("graduate_type", "GRADUATE") != "TEACHER"
#     ]
#
#     if not payment_registrations:
#         await send_safe(
#             message.chat.id,
#             f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user.get('full_name')} –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã.",
#         )
#         await state.clear()
#         return
#
#     # If only one city requires payment, select it automatically
#     if len(payment_registrations) == 1:
#         city = payment_registrations[0]["target_city"]
#         graduation_year = payment_registrations[0]["graduation_year"]
#
#         # Calculate payment amounts
#         graduate_type = payment_registrations[0].get("graduate_type", "GRADUATE")
#         regular_amount, discount, discounted_amount, formula_amount = app.calculate_payment_amount(
#             city, graduation_year, graduate_type
#         )
#
#         # Store values for confirmation
#         await state.update_data(
#             selected_user_id=user_id,
#             selected_city=city,
#             regular_amount=regular_amount,
#             discounted_amount=discounted_amount,
#             formula_amount=formula_amount,
#             graduation_year=graduation_year,
#             graduate_type=graduate_type,
#         )
#
#         # Ask for payment amount
#         username = selected_user.get("username", "")
#         username_display = f" (@{username})" if username else ""
#
#         # Format status message with payment options
#         from datetime import datetime
#         from app.routers.payment import EARLY_REGISTRATION_DATE
#
#         # Check if we're in early registration period
#         today = datetime.now()
#         is_early_registration = today < EARLY_REGISTRATION_DATE
#
#         payment_options = f"üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—É–º–º—ã:\n"
#
#         if is_early_registration:
#             payment_options += f"‚Ä¢ –†–∞–Ω–Ω—è—è –æ–ø–ª–∞—Ç–∞ (—Å–æ —Å–∫–∏–¥–∫–æ–π): {discounted_amount} —Ä—É–±.\n"
#
#         payment_options += f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—É–º–º–∞: {regular_amount} —Ä—É–±.\n"
#
#         if formula_amount > regular_amount:
#             payment_options += f"‚Ä¢ –ü–æ —Ñ–æ—Ä–º—É–ª–µ: {formula_amount} —Ä—É–±.\n"
#
#         status_msg = await send_safe(
#             message.chat.id,
#             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user.get('full_name')}{username_display}\n"
#             f"–ì–æ—Ä–æ–¥: {city}\n"
#             f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {graduation_year}\n\n"
#             f"{payment_options}\n"
#             f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:",
#         )
#     else:
#         # Multiple cities, ask which one to mark payment for
#         city_choices = {}
#         for reg in payment_registrations:
#             city = reg["target_city"]
#             payment_status = reg.get("payment_status", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")
#
#             # Format payment status
#             if payment_status == "confirmed":
#                 status_emoji = "‚úÖ"
#             elif payment_status == "pending":
#                 status_emoji = "‚è≥"
#             elif payment_status == "declined":
#                 status_emoji = "‚ùå"
#             else:
#                 status_emoji = "‚ö™"
#
#             city_choices[city] = f"{city} {status_emoji}"
#
#         # Add cancel option
#         city_choices["cancel"] = "‚ùå –û—Ç–º–µ–Ω–∞"
#
#         # Ask for city selection
#         response = await ask_user_choice(
#             message.chat.id,
#             f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user.get('full_name')} –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
#             choices=city_choices,
#             state=state,
#             timeout=None,
#         )
#
#         if response == "cancel":
#             await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#             await state.clear()
#             return
#
#         # Get the registration for selected city
#         selected_reg = next(
#             (reg for reg in payment_registrations if reg["target_city"] == response), None
#         )
#
#         if not selected_reg:
#             await send_safe(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             await state.clear()
#             return
#
#         city = selected_reg["target_city"]
#         graduation_year = selected_reg["graduation_year"]
#
#         # Calculate payment amounts
#         graduate_type = selected_reg.get("graduate_type", "GRADUATE")
#         regular_amount, discount, discounted_amount, formula_amount = app.calculate_payment_amount(
#             city, graduation_year, graduate_type
#         )
#
#         # Store values for confirmation
#         await state.update_data(
#             selected_user_id=user_id,
#             selected_city=city,
#             regular_amount=regular_amount,
#             discounted_amount=discounted_amount,
#             formula_amount=formula_amount,
#             graduation_year=graduation_year,
#             graduate_type=graduate_type,
#         )
#
#         # Ask for payment amount
#         username = selected_user.get("username", "")
#         username_display = f" (@{username})" if username else ""
#
#         # Format status message with payment options
#         from datetime import datetime
#         from app.routers.payment import EARLY_REGISTRATION_DATE
#
#         # Check if we're in early registration period
#         today = datetime.now()
#         is_early_registration = today < EARLY_REGISTRATION_DATE
#
#         payment_options = f"üí∞ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—É–º–º—ã:\n"
#
#         if is_early_registration:
#             payment_options += f"‚Ä¢ –†–∞–Ω–Ω—è—è –æ–ø–ª–∞—Ç–∞ (—Å–æ —Å–∫–∏–¥–∫–æ–π): {discounted_amount} —Ä—É–±.\n"
#
#         payment_options += f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—É–º–º–∞: {regular_amount} —Ä—É–±.\n"
#
#         if formula_amount > regular_amount:
#             payment_options += f"‚Ä¢ –ü–æ —Ñ–æ—Ä–º—É–ª–µ: {formula_amount} —Ä—É–±.\n"
#
#         while True:
#             try:
#                 response = await ask_user(
#                     message.chat.id,
#                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user.get('full_name')}{username_display}\n"
#                     f"–ì–æ—Ä–æ–¥: {city}\n"
#                     f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {graduation_year}\n\n"
#                     f"{payment_options}\n"
#                     f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:",
#                 )
#                 if not response:
#                     return
#                 payment_amount = int(response)
#                 break
#             except:
#                 await send_safe(
#                     message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:"
#                 )
#
#     from app.router import app
#
#     # Get user info
#     user_data = await app.collection.find_one({"user_id": user_id, "target_city": city})
#
#     if not user_data:
#         await send_safe(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#         await state.clear()
#         return
#
#     # Format confirmation message
#     username = user_data.get("username", "")
#     username_display = f" (@{username})" if username else ""
#     full_name = user_data.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è")
#
#     # Get current payment amount if exists
#     current_amount = user_data.get("payment_amount", 0)
#     payment_status = user_data.get("payment_status", None)
#
#     confirmation_text = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:\n\n"
#     confirmation_text += f"üë§ {full_name}{username_display}\n"
#     confirmation_text += f"üèôÔ∏è {city}\n"
#     confirmation_text += f"üí∞ –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {payment_amount} —Ä—É–±.\n"
#
#     if payment_status == "confirmed" and current_amount > 0:
#         # This is an additional payment
#         confirmation_text += (
#             f"\n‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {current_amount} —Ä—É–±.\n"
#         )
#         confirmation_text += (
#             f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {current_amount + payment_amount} —Ä—É–±."
#         )
#
#     confirm = await ask_user_confirmation(
#         message.chat.id,
#         confirmation_text,
#         state=state,
#     )
#
#     if not confirm:
#         await send_safe(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#         await state.clear()
#         return
#
#     await app.update_payment_status(
#         user_id=user_id,
#         city=city,
#         status="confirmed",
#         payment_amount=payment_amount,
#         admin_id=message.from_user.id,
#         admin_username=message.from_user.username,
#         admin_comment="–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
#     )
#
#     # Get updated user data
#     updated_user = await app.collection.find_one({"user_id": user_id, "target_city": city})
#     total_amount = updated_user.get("payment_amount", payment_amount)
#
#     # Send success message
#     success_message = (
#         f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!\n\n"
#         f"üë§ {full_name}{username_display}\n"
#         f"üèôÔ∏è {city}\n"
#         f"üí∞ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_amount} —Ä—É–±.\n"
#     )
#
#     if total_amount != payment_amount:
#         success_message += f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.\n"
#
#     # Notify the user about the payment
#     try:
#         user_notification = (
#             f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤–æ –≤—Å—Ç—Ä–µ—á–µ –≤ –≥–æ—Ä–æ–¥–µ {city} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
#             f"–°—É–º–º–∞: {payment_amount} —Ä—É–±."
#         )
#
#         if total_amount != payment_amount:
#             user_notification += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {total_amount} —Ä—É–±."
#
#         user_notification += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É."
#
#         await send_safe(user_id, user_notification)
#         success_message += "\n‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
#     except Exception as e:
#         logger.error(f"Failed to notify user {user_id} about payment: {e}")
#         success_message += "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
#
#     await send_safe(message.chat.id, success_message)
#
#     # Auto-export to Google Sheets
#     await app.export_registered_users_to_google_sheets()


@commands_menu.add_command(
    "payment_stats", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ–ø–ª–∞—Ç", visibility=Visibility.ADMIN_ONLY
)
@router.message(Command("payment_stats"), AdminFilter())
async def show_payment_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –æ–ø–ª–∞—Ç –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞"""
    from app.router import app

    # Send status message
    status_msg = await send_safe(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –æ–ø–ª–∞—Ç...")

    # Get all registrations
    cursor = app.collection.find(
        {
            "graduation_year": {
                "$exists": True,
                "$ne": 0,
            },  # Filter out entries without graduation year
            "payment_status": "confirmed",  # Only include confirmed payments
            "payment_amount": {"$gt": 0},  # Only include payments > 0
        }
    )
    registrations = await cursor.to_list(length=None)

    if not registrations:
        await status_msg.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–∞—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ–¥–æ–º –≤—ã–ø—É—Å–∫–∞.")
        return

    # Convert MongoDB records to pandas DataFrame
    df = pd.DataFrame(registrations)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–æ–≤ –≤—ã–ø—É—Å–∫–∞
    df["graduation_year"] = pd.to_numeric(df["graduation_year"], errors="coerce")
    df = df.dropna(subset=["graduation_year"])
    df["–ü—è—Ç–∏–ª–µ—Ç–∫–∞"] = df["graduation_year"].apply(lambda y: f"{int(y)//5*5}‚Äì{int(y)//5*5 + 4}")

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Å—É–º–º–∞ –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º
    donation_by_period = df.groupby("–ü—è—Ç–∏–ª–µ—Ç–∫–∞")["payment_amount"].sum()
    donation_by_period = donation_by_period[donation_by_period > 0].sort_index()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plt.figure(figsize=(10, 10), dpi=100)

    # Get a nicer color palette
    colors = plt.cm.Set3.colors[: len(donation_by_period)]

    # Add percentage and absolute values to the labels
    total = donation_by_period.sum()
    labels = [
        f"{period}: {amount:,.0f} ‚ÇΩ ({amount/total:.1%})"
        for period, amount in zip(donation_by_period.index, donation_by_period.values)
    ]

    plt.pie(
        donation_by_period.values,
        labels=labels,
        autopct="",  # We already added percentages to labels
        startangle=90,
        colors=colors,
        shadow=False,
        wedgeprops={"linewidth": 1, "edgecolor": "white"},
    )

    plt.title("–°—É–º–º–∞—Ä–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞", fontsize=16, pad=20)
    plt.tight_layout()

    # Save the plot to a bytes buffer
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    # Delete status message
    await status_msg.delete()

    # Send the diagram
    await message.answer_photo(
        BufferedInputFile(buf.getvalue(), filename="payment_stats.png"),
        caption="üí∞ –°—É–º–º–∞—Ä–Ω—ã–µ –æ–ø–ª–∞—Ç—ã –ø–æ –ø—è—Ç–∏–ª–µ—Ç–∫–∞–º –≤—ã–ø—É—Å–∫–∞",
    )
