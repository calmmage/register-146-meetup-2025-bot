import asyncio

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger
from app.app import App

from botspot import commands_menu
from botspot.user_interactions import ask_user_choice, ask_user_raw, ask_user_choice_raw
from botspot.utils import send_safe

router = Router()


async def ask_low_rating_feedback(
    message,
    state,
    app: App,
    rating_type: str,
    rating_value: str | None,
    user_id: int,
    username: str | None,
) -> str | None:
    """Ask for specific feedback when a low rating (1-3) is given"""
    if rating_value and int(rating_value) <= 3:
        feedback = await ask_user_choice_raw(
            message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ {rating_type} –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
            choices={
                "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            },
            state=state,
            timeout=None,
        )

        if feedback and isinstance(feedback, str):
            # Button was clicked
            if feedback == "skip":
                await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")
                return None
        elif feedback and feedback.text:
            # User sent a text message
            await app.save_event_log(
                "feedback",
                {
                    "type": "low_rating_feedback",
                    "rating_type": rating_type,
                    "rating_value": rating_value,
                    "feedback": feedback.text,
                },
                user_id,
                username,
            )
            return feedback.text
    return None


async def save_feedback_and_thank(
    message: Message,
    state,
    app: App,
    feedback_data: dict,
    is_cancel: bool = False,
) -> bool:
    """Helper function to save feedback and send thank you message"""
    # Ensure feedback_data has required fields
    if message.from_user:
        if "user_id" not in feedback_data:
            feedback_data["user_id"] = message.from_user.id
        if "username" not in feedback_data:
            feedback_data["username"] = message.from_user.username

    # Save all feedback data to the database
    await app.save_feedback(feedback_data)  # Pass the dict directly

    # Standard thank you message
    thank_you_msg = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. "
    thank_you_msg += "–°–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞–Ω–∞–ª @school146club –∏ –æ–±—â–∏–π —á–∞—Ç –Ω–∞ 685 –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ 146 "
    thank_you_msg += "(–≤—Ö–æ–¥ –º–æ–¥–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ https://t.me/+_wm7MlaGhCExOTg6) "
    thank_you_msg += "—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.\n\n"

    # Add photo album links
    thank_you_msg += "üì∏ –§–æ—Ç–æ–∞–ª—å–±–æ–º—ã —Å –≤—Å—Ç—Ä–µ—á:\n\n"

    city = feedback_data.get("city")
    if city == "perm":
        thank_you_msg += "‚Ä¢ –í–∞—à –≥–æ—Ä–æ–¥ - –ü–µ—Ä–º—å: https://disk.yandex.ru/d/bK6dVlNET7Uifg\n"
        thank_you_msg += "‚Ä¢ –ú–æ—Å–∫–≤–∞: https://disk.yandex.ru/d/gF_eko0YLslsOQ\n"
    elif city == "moscow":
        thank_you_msg += "‚Ä¢ –í–∞—à –≥–æ—Ä–æ–¥ - –ú–æ—Å–∫–≤–∞: https://disk.yandex.ru/d/gF_eko0YLslsOQ\n"
        thank_you_msg += "‚Ä¢ –ü–µ—Ä–º—å: https://disk.yandex.ru/d/bK6dVlNET7Uifg\n"
    else:
        thank_you_msg += "‚Ä¢ –ü–µ—Ä–º—å: https://disk.yandex.ru/d/bK6dVlNET7Uifg\n"
        thank_you_msg += "‚Ä¢ –ú–æ—Å–∫–≤–∞: https://disk.yandex.ru/d/gF_eko0YLslsOQ\n"

    if is_cancel:
        thank_you_msg += (
            "\n–ù–∞ —ç—Ç–æ–º —Å–µ–∞–Ω—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–∫–æ–Ω—á–µ–Ω. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö! üéâ"
        )

    await send_safe(
        message.chat.id,
        thank_you_msg,
    )

    if is_cancel:
        return True

    if app.settings.delay_messages:
        await asyncio.sleep(5)

    # Ask about club projects
    response = await ask_user_raw(
        message.chat.id,
        "–•–æ—á–µ—à—å –µ—â–µ –≤ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–µ–∫—Ç—ã –ö–ª—É–±–∞ –î—Ä—É–∑–µ–π 146 –≤–∫–ª—é—á–∞—Ç—å—Å—è? –ï—Å–ª–∏ –¥–∞, –æ—Ç–≤–µ—Ç—å —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        state=state,
        timeout=1200,  # 20 minutes timeout
    )

    if response:
        # Log the response
        await app.save_event_log(
            "feedback",
            {
                "type": "club_participation_interest",
                "response": response.text,
            },
            feedback_data["user_id"],
            feedback_data.get("username"),
        )

        await send_safe(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ —Ç–µ–±–µ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ - –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—Å—É–¥–∏—Ç—å. "
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã, –ø–∏—à–∏: @marish_me, @petr_lavrov, @istominivan",
        )

        await send_safe(
            app.settings.events_chat_id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {feedback_data.get('full_name')} ({feedback_data['user_id']}) –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Å—Ç–æ–º—Ö. –û—Ç–≤–µ—Ç: {response.text}",
        )
    else:
        await send_safe(
            message.chat.id,
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã, –ø–∏—à–∏: @marish_me, @petr_lavrov, @istominivan",
        )
    await send_safe(
        message.chat.id,
        "–ù–∞ —ç—Ç–æ–º —Å–µ–∞–Ω—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–∫–æ–Ω—á–µ–Ω. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö! üéâ",
    )
    return True


@commands_menu.add_command("feedback", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≤—Å—Ç—Ä–µ—á–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤")
@router.message(Command("feedback"))
async def feedback_handler(message: Message, state: FSMContext, app: App):
    """Handle user feedback for alumni meetup"""
    if message.from_user is None:
        logger.error("Message from_user is None")
        return

    # Get existing user data if available
    user_data = await app.collection.find_one({"user_id": message.from_user.id})
    full_name = user_data.get("full_name") if user_data else None

    # Initialize feedback data dict
    feedback_data = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "full_name": full_name,
    }

    # Start feedback flow
    await send_safe(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! \n"
        "–Ø —á–∞—Ç-–±–æ—Ç, —Å–æ–±–∏—Ä–∞—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –≤—Å—Ç—Ä–µ—á–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤. \n\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ç–≤–æ–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–ª—É—á—à–∞—Ç—å –Ω–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, "
        "–ø–æ–º–æ–≥–∏ –Ω–∞–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Ç—Ä–∞—Ç—å 4 –º–∏–Ω—É—Ç—ã :)",
    )

    if app.settings.delay_messages:
        await asyncio.sleep(5)

    # Step 1: Ask if user attended the meetup
    attendance = await ask_user_choice(
        message.chat.id,
        "–¢—ã –±—ã–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤?",
        choices={
            "yes": "–î–∞",
            "no": "–ù–µ—Ç",
            "cancel": "–û—Ç–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–∞",
        },
        state=state,
        timeout=None,
        columns=2,
        default_choice="cancel",
        highlight_default=False,
    )

    if attendance == "cancel":
        # Save minimal feedback before exiting
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    feedback_data["attended"] = attendance == "yes"

    # If they didn't attend, save feedback and finish
    if not feedback_data["attended"]:
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=False,
        )
        return

    # User attended, continue with feedback questions

    # Step 2: Ask which city the user attended
    city = await ask_user_choice(
        message.chat.id,
        "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ?",
        choices={
            "perm": "–ü–µ—Ä–º—å, –≤ —Å—É–±–±–æ—Ç—É 29 –º–∞—Ä—Ç–∞",
            "moscow": "–ú–æ—Å–∫–≤–∞, –≤ —Å—É–±–±–æ—Ç—É 05 –∞–ø—Ä–µ–ª—è",
            "saint_petersburg": "–ü–∏—Ç–µ—Ä, –≤ —Å—É–±–±–æ—Ç—É 05 –∞–ø—Ä–µ–ª—è",
            "belgrade": "–ë–µ–ª–≥—Ä–∞–¥, –≤ —Å—É–±–±–æ—Ç—É 05 –∞–ø—Ä–µ–ª—è",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        highlight_default=False,
        state=state,
        timeout=None,
        default_choice="cancel",
    )

    if city == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if city == "skip":
        city = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["city"] = city

    await app.save_event_log(
        "feedback",
        {
            "type": "city_selection",
            "city": city,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Step 3: Ask recommendation level
    recommendation = await ask_user_choice(
        message.chat.id,
        "–ö—Ä—É—Ç–æ! –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –±—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª —Å–≤–æ–∏–º –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É?\n\n"
        "1 - –ª—É—á—à–µ –∑–∞–Ω—è—Ç—å—Å—è —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º\n"
        "2 - –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ–ª—á–∞—Å–∞\n"
        "3 - –ø–æ—Å–∏–¥–µ—Ç—å –ø–∞—Ä—É —á–∞—Å–æ–≤ —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å\n"
        "4 - –ø–æ—Å–∏–¥–µ—Ç—å –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è - –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤\n"
        "5 - –º–æ—è –±—ã –≤–æ–ª—è - —Å–¥–µ–ª–∞–ª–∏ –±—ã afterparty –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∞–Ω—Ü—É—é—â–µ–≥–æ!",
        choices={
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        default_choice="cancel",
        highlight_default=False,
        timeout=None,
        columns=5,
    )

    if recommendation == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if recommendation == "skip":
        recommendation = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["recommendation_level"] = recommendation

    # Log recommendation level
    await app.save_event_log(
        "feedback",
        {
            "type": "recommendation_level",
            "level": recommendation,
            "city": city,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Ask for feedback if rating is low
    low_rating_feedback = await ask_low_rating_feedback(
        message,
        state,
        app,
        "–æ–±—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        recommendation,
        message.from_user.id,
        message.from_user.username,
    )
    if low_rating_feedback:
        feedback_data["recommendation_feedback"] = low_rating_feedback

    # Step 4: Ask venue rating
    venue_rating = await ask_user_choice(
        message.chat.id,
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–ª–æ—â–∞–¥–∫–∞?\n\n"
        "1 - —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å\n"
        "5 - —Å—É–ø–µ—Ä, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —ç—Ç–æ–º –∂–µ –º–µ—Å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É!",
        choices={
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        highlight_default=False,
        timeout=None,
        default_choice="cancel",
        columns=5,
    )

    if venue_rating == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if venue_rating == "skip":
        venue_rating = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["venue_rating"] = venue_rating

    # Log venue rating
    await app.save_event_log(
        "feedback",
        {
            "type": "venue_rating",
            "rating": venue_rating,
            "city": city,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Ask for feedback if rating is low
    low_rating_feedback = await ask_low_rating_feedback(
        message,
        state,
        app,
        "–ø–ª–æ—â–∞–¥–∫–µ",
        venue_rating,
        message.from_user.id,
        message.from_user.username,
    )
    if low_rating_feedback:
        feedback_data["venue_feedback"] = low_rating_feedback

    # Step 5: Ask food and drinks rating
    food_rating = await ask_user_choice(
        message.chat.id,
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –µ–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏?\n\n"
        "1 - –Ω–µ—Å—ä–µ–¥–æ–±–Ω–æ\n"
        "5 - –∫–∞–∂–¥—ã–π –±—ã –¥–µ–Ω—å —Ç–∞–∫ –µ—Å—Ç—å –∏ –ø–∏—Ç—å!",
        choices={
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        default_choice="cancel",
        highlight_default=False,
        state=state,
        timeout=None,
        columns=5,
    )

    if food_rating == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if food_rating == "skip":
        food_rating = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["food_rating"] = food_rating

    # Log food rating
    await app.save_event_log(
        "feedback",
        {
            "type": "food_rating",
            "rating": food_rating,
            "city": city,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Ask for feedback if rating is low
    low_rating_feedback = await ask_low_rating_feedback(
        message,
        state,
        app,
        "–µ–¥–µ –∏ –Ω–∞–ø–∏—Ç–∫–∞—Ö",
        food_rating,
        message.from_user.id,
        message.from_user.username,
    )
    if low_rating_feedback:
        feedback_data["food_feedback"] = low_rating_feedback

    # Step 6: Ask entertainment rating
    entertainment_rating = await ask_user_choice(
        message.chat.id,
        "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?\n\n"
        "1 - –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–∑ –Ω–µ –±—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∏ –∑–∞ –∫–∞–∫–∏–µ –∫–æ–≤—Ä–∏–∂–∫–∏\n"
        "5 - —Ç–æ–ª—å–∫–æ —Ä–∞–¥–∏ –Ω–∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å!",
        choices={
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        default_choice="cancel",
        state=state,
        timeout=None,
        highlight_default=False,
        columns=5,
    )

    if entertainment_rating == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if entertainment_rating == "skip":
        entertainment_rating = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["entertainment_rating"] = entertainment_rating

    # Log entertainment rating
    await app.save_event_log(
        "feedback",
        {
            "type": "entertainment_rating",
            "rating": entertainment_rating,
            "city": city,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Ask for feedback if rating is low
    low_rating_feedback = await ask_low_rating_feedback(
        message,
        state,
        app,
        "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö",
        entertainment_rating,
        message.from_user.id,
        message.from_user.username,
    )
    if low_rating_feedback:
        feedback_data["entertainment_feedback"] = low_rating_feedback

    # Step 7: Ask if willing to help organize next year
    help_interest = await ask_user_choice(
        message.chat.id,
        "–¢—ã –≥–æ—Ç–æ–≤ –±—ã–ª –±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–µ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –≤–µ—Å–Ω–æ–π 2026?\n\n"
        "1 - –¥–∞, –∑–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è!\n"
        "2 - –Ω–µ—Ç, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∞ –ø—Ä–∏–π—Ç–∏ –±—É–¥—É —Ä–∞–¥!\n"
        "3 - –ø–æ–∫–∞ —á—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å —Ç–∞–∫ –∑–∞—Ä–∞–Ω–µ–µ",
        choices={
            "yes": "1",
            "no": "2",
            "maybe": "3",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        timeout=None,
        columns=3,
        default_choice="cancel",
        highlight_default=True,
    )

    if help_interest == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if help_interest == "skip":
        help_interest = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["help_interest"] = help_interest

    # Log willingness to help
    await app.save_event_log(
        "feedback",
        {
            "type": "willing_to_help",
            "response": help_interest,
            "city": city,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Step 8: Ask for specific comments
    comments_text = None
    comments = await ask_user_choice_raw(
        message.chat.id,
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –º—ã –Ω–µ –≤–∫–ª—é—á–∏–ª–∏ –≤ –æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏ –Ω–∏–∂–µ",
        choices={
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        },
        state=state,
        timeout=None,
    )

    if comments and isinstance(comments, str):
        # Button was clicked
        if comments == "skip":
            await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif comments and comments.text:
        # User sent a text message
        comments_text = comments.text

    feedback_data["comments"] = comments_text

    # Step 9: Ask about feedback format preference
    feedback_format = await ask_user_choice(
        message.chat.id,
        "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å?",
        choices={
            "bot": "–í–æ—Ç —Ç–∞–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
            "google_forms": "–ì—É–≥–ª —Ñ–æ—Ä–º—ã",
            "skip": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            "cancel": "–û—Ç–º–µ–Ω–∞",
        },
        state=state,
        timeout=None,
        columns=2,
        default_choice="cancel",
        highlight_default=False,
    )

    if feedback_format == "cancel":
        # Save feedback data and thank the user
        await save_feedback_and_thank(
            message,
            state,
            app,
            feedback_data,
            is_cancel=True,
        )
        return

    if feedback_format == "skip":
        feedback_format = None
        await send_safe(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.")

    feedback_data["feedback_format_preference"] = feedback_format

    # Log feedback format preference
    await app.save_event_log(
        "feedback",
        {
            "type": "feedback_format_preference",
            "preference": feedback_format,
        },
        message.from_user.id,
        message.from_user.username,
    )

    # Save all feedback and thank the user using the helper function
    await save_feedback_and_thank(
        message,
        state,
        app,
        feedback_data,
        is_cancel=False,
    )
